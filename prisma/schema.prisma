// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Khoa => 1 n -> Bộ Môn -> 1 -> n
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

// Khoa
model Faculty {
  id              Int        @id @default(autoincrement())
  name            String
  code            String     @unique
  createdDatetime DateTime   @default(now())
  updatedDatetime DateTime   @default(now()) @updatedAt
  employees       Employee[]
  majors          Major[]
  sections        Section[]
}

// Bộ Môn
model Section {
  id              Int        @id @default(autoincrement())
  name            String
  code            String     @unique
  facultyId       Int
  faculty         Faculty    @relation(fields: [facultyId], references: [id])
  createdDatetime DateTime   @default(now())
  updatedDatetime DateTime   @default(now()) @updatedAt
  majors          Major[]
  employees       Employee[]
}

// Phòng ban
model Department {
  id              Int        @id @default(autoincrement())
  name            String
  createdDatetime DateTime   @default(now())
  updatedDatetime DateTime   @default(now()) @updatedAt
  employees       Employee[]
}

model Role {
  id          Int     @id @default(autoincrement())
  name        String
  code        String  @unique
  description String?

  createdDatetime DateTime      @default(now())
  updatedDatetime DateTime      @default(now()) @updatedAt
  resouceRoles    ResouceRole[]
  employees       Employee[]
}

model Employee {
  id                Int                @id @default(autoincrement())
  name              String
  email             String             @unique
  employeeCode      String             @unique
  dob               Boolean?
  phoneNumber       String?
  password          String
  isActive          Boolean            @default(false)
  facultyId         Int?
  faculty           Faculty?           @relation(fields: [facultyId], references: [id])
  sectionId         Int?
  section           Section?           @relation(fields: [sectionId], references: [id])
  roleId            Int
  role              Role               @relation(fields: [roleId], references: [id])
  createdDatetime   DateTime           @default(now())
  updatedDatetime   DateTime           @default(now()) @updatedAt
  positionEmployees PositionEmployee[]
  schoolSchedules   SchoolSchedule[]
  department        Department?        @relation(fields: [departmentId], references: [id])
  departmentId      Int?
}

// Ngành
model Major {
  id               Int               @id @default(autoincrement())
  name             String
  code             String            @unique
  createdDatetime  DateTime          @default(now())
  updatedDatetime  DateTime          @default(now()) @updatedAt
  facultyId        Int
  faculty          Faculty           @relation(fields: [facultyId], references: [id])
  sectionId        Int
  section          Section           @relation(fields: [sectionId], references: [id])
  students         Student[]
  trainingPrograms TrainingProgram[]
}

// Sinh viên
model Student {
  id               Int               @id @default(autoincrement())
  name             String
  dob              Boolean?
  phoneNumber      String?
  email            String            @unique
  password         String
  studentCode      String            @unique
  majorId          Int
  className        String?
  major            Major             @relation(fields: [majorId], references: [id])
  isGraduate       Boolean           @default(false)
  createdDatetime  DateTime          @default(now())
  updatedDatetime  DateTime          @default(now()) @updatedAt
  scores           Score[]
  registerSubjects RegisterSubject[]
}

// Chức vụ
model Position {
  id                Int                @id @default(autoincrement())
  name              String
  code              String             @unique
  createdDatetime   DateTime           @default(now())
  updatedDatetime   DateTime           @default(now()) @updatedAt
  positionEmployees PositionEmployee[]
}

model PositionEmployee {
  id              Int      @id @default(autoincrement())
  employeeId      Int
  employee        Employee @relation(fields: [employeeId], references: [id])
  positionId      Int
  position        Position @relation(fields: [positionId], references: [id])
  createdDatetime DateTime @default(now())
  updatedDatetime DateTime @default(now()) @updatedAt
}

// Học Phần
model Subject {
  id                        Int                      @id @default(autoincrement())
  name                      String
  code                      String                   @unique
  numberOfCredits           Int?
  numberPrerequisiteCredits Int?
  numberOfTeachingHours     Int
  coefficient               Decimal
  prerequisiteSubjects      Subject[]                @relation("SubjectPrerequisiteSubjecs")
  subjectsRelations         Subject[]                @relation("SubjectPrerequisiteSubjecs")
  createdDatetime           DateTime                 @default(now())
  updatedDatetime           DateTime                 @default(now()) @updatedAt
  scores                    Score[]
  trainingProgramContents   TrainingProgramContent[]
  schoolSchedules           SchoolSchedule[]
  registerSubjects          RegisterSubject[]
}

// Điểm
model Score {
  id              Int      @id @default(autoincrement())
  studentId       Int
  student         Student  @relation(fields: [studentId], references: [id])
  subjectId       Int
  subject         Subject  @relation(fields: [subjectId], references: [id])
  number          Int
  status          Int      @default(1)
  createdDatetime DateTime @default(now())
  updatedDatetime DateTime @default(now()) @updatedAt
}

// Học kỳ
model Semester {
  id              Int              @id @default(autoincrement())
  name            String
  group           String
  schoolYear      String
  createdDatetime DateTime         @default(now())
  updatedDatetime DateTime         @default(now()) @updatedAt
  schoolSchedule  SchoolSchedule?
  registerSubject RegisterSubject?
}

// Năm học
model AcademicYear {
  id               Int               @id @default(autoincrement())
  name             String
  code             String            @unique
  startYear        DateTime?
  finishYear       DateTime?
  createdDatetime  DateTime          @default(now())
  updatedDatetime  DateTime          @default(now()) @updatedAt
  trainingPrograms TrainingProgram[]
}

// Khối kiến thức
model KnowledgeBlock {
  id                      Int                      @id @default(autoincrement())
  code                    String                   @unique
  name                    String
  knowledgeParentId       Int?
  knowledgeParent         KnowledgeBlock?          @relation("KnowledgeBlock", fields: [knowledgeParentId], references: [id])
  knowledgeChildren       KnowledgeBlock[]         @relation("KnowledgeBlock")
  createdDatetime         DateTime                 @default(now())
  updatedDatetime         DateTime                 @default(now()) @updatedAt
  trainingProgramContents TrainingProgramContent[]
}

// Chương trình đào tạo
model TrainingProgram {
  id                      Int                      @id @default(autoincrement())
  name                    String
  marjorId                Int
  marjor                  Major                    @relation(fields: [marjorId], references: [id])
  academicYearId          Int
  academicYear            AcademicYear             @relation(fields: [academicYearId], references: [id])
  createdDatetime         DateTime                 @default(now())
  updatedDatetime         DateTime                 @default(now()) @updatedAt
  trainingProgramContents TrainingProgramContent[]
}

// Nội dung chương trình đào tạo
model TrainingProgramContent {
  id                Int             @id @default(autoincrement())
  subjectId         Int
  subject           Subject         @relation(fields: [subjectId], references: [id])
  knowledgeBlockId  Int
  knowledgeBlock    KnowledgeBlock  @relation(fields: [knowledgeBlockId], references: [id])
  trainingProgramId Int
  trainingProgram   TrainingProgram @relation(fields: [trainingProgramId], references: [id])
  createdDatetime   DateTime        @default(now())
  updatedDatetime   DateTime        @default(now()) @updatedAt
}

// Thời khoá biểu toàn trường
model SchoolSchedule {
  id              Int      @id @default(autoincrement())
  employeeId      Int
  employee        Employee @relation(fields: [employeeId], references: [id])
  subjectId       Int
  subject         Subject  @relation(fields: [subjectId], references: [id])
  className       String
  semesterId      Int      @unique
  semester        Semester @relation(fields: [semesterId], references: [id])
  numberOfCredits Int
  room            String
  createdDatetime DateTime @default(now())
  updatedDatetime DateTime @default(now()) @updatedAt
}

// Đăng ký học
model RegisterSubject {
  id         Int      @id @default(autoincrement())
  studentId  Int
  student    Student  @relation(fields: [studentId], references: [id])
  subjectId  Int
  subject    Subject  @relation(fields: [subjectId], references: [id])
  semesterId Int      @unique
  semester   Semester @relation(fields: [semesterId], references: [id])

  createdDatetime DateTime @default(now())
  updatedDatetime DateTime @default(now()) @updatedAt
}

// GroupRoles

model Resource {
  id   Int    @id @default(autoincrement())
  name String
  code String @unique

  createdDatetime DateTime      @default(now())
  updatedDatetime DateTime      @default(now()) @updatedAt
  resouceRoles    ResouceRole[]
}

model ResouceRole {
  id         Int      @id @default(autoincrement())
  roleId     Int
  role       Role     @relation(fields: [roleId], references: [id])
  resourceId Int
  resource   Resource @relation(fields: [resourceId], references: [id])

  canAdd          Boolean  @default(false)
  canView         Boolean  @default(false)
  canDelete       Boolean  @default(false)
  canEdit         Boolean  @default(false)
  canExport       Boolean  @default(false)
  canImport       Boolean  @default(false)
  canApprove      Boolean  @default(false)
  createdDatetime DateTime @default(now())
  updatedDatetime DateTime @default(now()) @updatedAt
}
